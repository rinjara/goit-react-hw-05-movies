{"version":3,"file":"static/js/387.1510fab0.chunk.js","mappings":"8SAEAA,EAAAA,GAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,6GAENF,EAAAA,GAAAA,IAAA,sCAAyCC,IAFnC,cAEvBE,EAFuB,yBAGtBA,EAASC,KAAKC,SAHQ,gCAK7BC,QAAQC,IAAI,KAAMC,SALW,yDAAH,qDASjBC,EAAa,mCAAG,WAAMC,GAAN,gGAEFV,EAAAA,GAAAA,IAAA,iBACXU,EADW,oBACQT,EADR,oBAFE,cAEnBE,EAFmB,yBAKlBA,EAASC,MALS,gCAOzBE,QAAQC,IAAI,KAAMC,SAPO,yDAAH,sDAWbG,EAAe,mCAAG,WAAMC,GAAN,gGAEJZ,EAAAA,GAAAA,IAAA,gCACIC,EADJ,kBACqBW,IAHjB,cAErBT,EAFqB,yBAKpBA,EAASC,KAAKC,SALM,gCAO3BC,QAAQC,IAAI,KAAMC,SAPS,yDAAH,sDAWfK,EAAY,mCAAG,WAAMH,GAAN,gGAEDV,EAAAA,GAAAA,IAAA,iBACXU,EADW,4BACgBT,EADhB,oBAFC,cAElBE,EAFkB,yBAKjBA,EAASC,KAAKU,MALG,gCAOxBR,QAAQC,IAAI,KAAMC,SAPM,yDAAH,sDAWZO,EAAiB,mCAAG,WAAML,GAAN,gGAENV,EAAAA,GAAAA,IAAA,iBACXU,EADW,4BACgBT,EADhB,oBAFM,cAEvBE,EAFuB,yBAKtBA,EAASC,KAAKC,SALQ,gCAO7BC,QAAQC,IAAI,KAAMC,SAPW,yDAAH,qD,iIC7CjBQ,EAAUC,EAAAA,GAAAA,IAAH,4CAIPC,EAAOD,EAAAA,GAAAA,GAAH,gD,SCmCjB,EApCgB,WACd,IAAQP,GAAYS,EAAAA,EAAAA,MAAZT,QACR,GAA8BU,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAUA,IARAC,EAAAA,EAAAA,YAAU,WACJb,IACFK,EAAAA,EAAAA,IAAkBS,OAAOd,IAAUe,MAAK,SAAArB,GACtCkB,EAAWlB,EACZ,GAEJ,GAAE,CAACM,IAECW,EAIL,OAAuB,IAAnBA,EAAQK,QAER,SAACV,EAAD,WACE,yEAMJ,SAACE,EAAD,UACGG,EAAQM,KAAI,SAAAC,GAAM,OACjB,2BACE,qCAAaA,EAAOC,WACpB,uBAAID,EAAOE,YAFJF,EAAOG,GADC,KAQxB,C","sources":["api/fetchApi.js","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '7bdc810ad124afd40c6daedecd43d00a';\n\nexport const getTrendingMovies = async () => {\n  try {\n    const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getMoviesById = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getMovieByQuery = async query => {\n  try {\n    const response = await axios.get(\n      `/search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getMovieCast = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getReviewsOnMovie = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  padding: 0 24px;\n`;\n\nexport const List = styled.ul`\n  padding-right: 24px;\n`;\n","import { getReviewsOnMovie } from 'api/fetchApi';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { List, Wrapper } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState(null);\n\n  useEffect(() => {\n    if (movieId) {\n      getReviewsOnMovie(Number(movieId)).then(data => {\n        setReviews(data);\n      });\n    }\n  }, [movieId]);\n\n  if (!reviews) {\n    return;\n  }\n\n  if (reviews.length === 0) {\n    return (\n      <Wrapper>\n        <p> We don`t have any reviews for this movie.</p>\n      </Wrapper>\n    );\n  }\n\n  return (\n    <List>\n      {reviews.map(review => (\n        <li key={review.id}>\n          <h3>Author: {review.author}</h3>\n          <p>{review.content}</p>\n        </li>\n      ))}\n    </List>\n  );\n};\n\nexport default Reviews;\n"],"names":["axios","API_KEY","getTrendingMovies","response","data","results","console","log","message","getMoviesById","movieId","getMovieByQuery","query","getMovieCast","cast","getReviewsOnMovie","Wrapper","styled","List","useParams","useState","reviews","setReviews","useEffect","Number","then","length","map","review","author","content","id"],"sourceRoot":""}
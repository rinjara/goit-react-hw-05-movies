{"version":3,"file":"static/js/247.4448c465.chunk.js","mappings":"8SAEAA,EAAAA,GAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,6GAENF,EAAAA,GAAAA,IAAA,sCAAyCC,IAFnC,cAEvBE,EAFuB,yBAGtBA,EAASC,KAAKC,SAHQ,gCAK7BC,QAAQC,IAAI,KAAMC,SALW,yDAAH,qDASjBC,EAAa,mCAAG,WAAMC,GAAN,gGAEFV,EAAAA,GAAAA,IAAA,iBACXU,EADW,oBACQT,EADR,oBAFE,cAEnBE,EAFmB,yBAKlBA,EAASC,MALS,gCAOzBE,QAAQC,IAAI,KAAMC,SAPO,yDAAH,sDAWbG,EAAe,mCAAG,WAAMC,GAAN,gGAEJZ,EAAAA,GAAAA,IAAA,gCACIC,EADJ,kBACqBW,IAHjB,cAErBT,EAFqB,yBAKpBA,EAASC,KAAKC,SALM,gCAO3BC,QAAQC,IAAI,KAAMC,SAPS,yDAAH,sDAWfK,EAAY,mCAAG,WAAMH,GAAN,gGAEDV,EAAAA,GAAAA,IAAA,iBACXU,EADW,4BACgBT,EADhB,oBAFC,cAElBE,EAFkB,yBAKjBA,EAASC,KAAKU,MALG,gCAOxBR,QAAQC,IAAI,KAAMC,SAPM,yDAAH,sDAWZO,EAAiB,mCAAG,WAAML,GAAN,gGAENV,EAAAA,GAAAA,IAAA,iBACXU,EADW,4BACgBT,EADhB,oBAFM,cAEvBE,EAFuB,yBAKtBA,EAASC,KAAKC,SALQ,gCAO7BC,QAAQC,IAAI,KAAMC,SAPW,yDAAH,qD,8ECL9B,UAtCa,WACX,IAAQE,GAAYM,EAAAA,EAAAA,MAAZN,QACR,GAAgCO,EAAAA,EAAAA,UAAS,MAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAUA,OARAC,EAAAA,EAAAA,YAAU,WACJV,IACFG,EAAAA,EAAAA,IAAaQ,OAAOX,IAAUY,MAAK,SAAAlB,GACjCe,EAAYf,EACb,GAEJ,GAAE,CAACM,KAGF,yBACGQ,IACC,wBACGA,EAASK,KAAI,SAAAC,GAAK,OACjB,2BACE,yBAC0B,OAAvBA,EAAMC,eACL,gBACEC,IAAG,0CAAqCF,EAAMC,cAC9CE,IAAKH,EAAMI,cACXC,MAAM,WAKZ,uBAAIL,EAAMI,iBACV,uCAAeJ,EAAMM,eAZdN,EAAMO,GADE,OAoB5B,C","sources":["api/fetchApi.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '7bdc810ad124afd40c6daedecd43d00a';\n\nexport const getTrendingMovies = async () => {\n  try {\n    const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getMoviesById = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getMovieByQuery = async query => {\n  try {\n    const response = await axios.get(\n      `/search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getMovieCast = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getReviewsOnMovie = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n","import { getMovieCast } from 'api/fetchApi';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [castInfo, setCastInfo] = useState(null);\n\n  useEffect(() => {\n    if (movieId) {\n      getMovieCast(Number(movieId)).then(data => {\n        setCastInfo(data);\n      });\n    }\n  }, [movieId]);\n\n  return (\n    <div>\n      {castInfo && (\n        <ul>\n          {castInfo.map(actor => (\n            <li key={actor.id}>\n              <div>\n                {actor.profile_path !== null && (\n                  <img\n                    src={`https://image.tmdb.org/t/p/w200/${actor.profile_path}`}\n                    alt={actor.original_name}\n                    width=\"100\"\n                  />\n                )}\n              </div>\n\n              <p>{actor.original_name}</p>\n              <p>Character: {actor.character}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["axios","API_KEY","getTrendingMovies","response","data","results","console","log","message","getMoviesById","movieId","getMovieByQuery","query","getMovieCast","cast","getReviewsOnMovie","useParams","useState","castInfo","setCastInfo","useEffect","Number","then","map","actor","profile_path","src","alt","original_name","width","character","id"],"sourceRoot":""}
{"version":3,"file":"static/js/691.9a38e694.chunk.js","mappings":"8SAEAA,EAAAA,GAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,6GAENF,EAAAA,GAAAA,IAAA,sCAAyCC,IAFnC,cAEvBE,EAFuB,yBAGtBA,EAASC,KAAKC,SAHQ,gCAK7BC,QAAQC,IAAI,KAAMC,SALW,yDAAH,qDASjBC,EAAa,mCAAG,WAAMC,GAAN,gGAEFV,EAAAA,GAAAA,IAAA,iBACXU,EADW,oBACQT,EADR,oBAFE,cAEnBE,EAFmB,yBAKlBA,EAASC,MALS,gCAOzBE,QAAQC,IAAI,KAAMC,SAPO,yDAAH,sDAWbG,EAAe,mCAAG,WAAMC,GAAN,gGAEJZ,EAAAA,GAAAA,IAAA,gCACIC,EADJ,kBACqBW,IAHjB,cAErBT,EAFqB,yBAKpBA,EAASC,KAAKC,SALM,gCAO3BC,QAAQC,IAAI,KAAMC,SAPS,yDAAH,sDAWfK,EAAY,mCAAG,WAAMH,GAAN,gGAEDV,EAAAA,GAAAA,IAAA,iBACXU,EADW,4BACgBT,EADhB,oBAFC,cAElBE,EAFkB,yBAKjBA,EAASC,KAAKU,MALG,gCAOxBR,QAAQC,IAAI,KAAMC,SAPM,yDAAH,sDAWZO,EAAiB,mCAAG,WAAML,GAAN,gGAENV,EAAAA,GAAAA,IAAA,iBACXU,EADW,4BACgBT,EADhB,oBAFM,cAEvBE,EAFuB,yBAKtBA,EAASC,KAAKC,SALQ,gCAO7BC,QAAQC,IAAI,KAAMC,SAPW,yDAAH,qD,uJC5CjBQ,EAAaC,EAAAA,GAAAA,KAAH,8GAOVC,EAAmBD,EAAAA,GAAAA,OAAH,4NAahBE,EAAcF,EAAAA,GAAAA,MAAH,yHAQXG,GAAaH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,8L,SCgCvB,EApDe,WACb,OAA0CK,EAAAA,EAAAA,UAAS,MAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAsCL,EAAAA,EAAAA,UAAS,IAA/C,eAAOM,EAAP,KAAoBC,EAApB,KAEMjB,EAAQc,EAAaI,IAAI,SACzBC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACHrB,IAGLD,EAAAA,EAAAA,IAAgBC,GAAOsB,MAAK,SAAAC,GAAG,OAAIX,EAAiBW,EAArB,GAChC,GAAE,CAACvB,IAYJ,OACE,iCACE,UAACI,EAAD,CAAYoB,SAZK,SAAAC,GACnBA,EAAEC,iBACFX,EAAgC,KAAhBC,EAAqB,CAAEhB,MAAOgB,GAAgB,CAAC,GAC/DC,EAAe,GAChB,EAQG,WACE,SAACX,EAAD,CAAkBqB,KAAK,SAAvB,UACE,SAAC,MAAD,OAEF,SAACpB,EAAD,CACEoB,KAAK,OACLC,MAAOZ,EACPa,SAbkB,SAAAJ,GACxBR,EAAeQ,EAAEK,OAAOF,MAAMG,OAC/B,QAeG,wBACGpB,GACCA,EAAcqB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OAChB,yBACE,SAAC1B,EAAD,CAAY2B,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMlB,GAAhD,SACGe,KAFID,EADO,QAU3B,C","sources":["api/fetchApi.js","pages/Movies/Movies.styled.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '7bdc810ad124afd40c6daedecd43d00a';\n\nexport const getTrendingMovies = async () => {\n  try {\n    const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getMoviesById = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getMovieByQuery = async query => {\n  try {\n    const response = await axios.get(\n      `/search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getMovieCast = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getReviewsOnMovie = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const StyledForm = styled.form`\n  display: flex;\n  align-items: center;\n  margin-top: 20px;\n  padding-left: 24px;\n`;\n\nexport const SearchFormButton = styled.button`\n  width: 48px;\n  height: 33.5px;\n  border: 1;\n  opacity: 1;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const StyledInput = styled.input`\n  width: 500px;\n  font: inherit;\n  height: 28px;\n  padding-left: 4px;\n  padding-right: 4px;\n`;\n\nexport const StyledLink = styled(NavLink)`\n  text-decoration: none;\n  color: inherit;\n  &.visited {\n    color: black;\n  }\n\n  &:hover,\n  &:focus {\n    color: red;\n    text-decoration: underline;\n  }\n`;\n","import { getMovieByQuery } from 'api/fetchApi';\nimport { useEffect, useState } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { BiSearchAlt } from 'react-icons/bi';\nimport {\n  SearchFormButton,\n  StyledForm,\n  StyledInput,\n  StyledLink,\n} from './Movies.styled';\n\nconst Movies = () => {\n  const [moviesByQuery, setMoviesByQuery] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const query = searchParams.get('query');\n  const location = useLocation();\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n    getMovieByQuery(query).then(res => setMoviesByQuery(res));\n  }, [query]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setSearchParams(searchQuery !== '' ? { query: searchQuery } : {});\n    setSearchQuery('');\n  };\n\n  const handleInputChange = e => {\n    setSearchQuery(e.target.value.trim());\n  };\n\n  return (\n    <>\n      <StyledForm onSubmit={handleSubmit}>\n        <SearchFormButton type=\"submit\">\n          <BiSearchAlt />\n        </SearchFormButton>\n        <StyledInput\n          type=\"text\"\n          value={searchQuery}\n          onChange={handleInputChange}\n        />\n      </StyledForm>\n\n      <ul>\n        {moviesByQuery &&\n          moviesByQuery.map(({ id, title }) => (\n            <li key={id}>\n              <StyledLink to={`/movies/${id}`} state={{ from: location }}>\n                {title}\n              </StyledLink>\n            </li>\n          ))}\n      </ul>\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["axios","API_KEY","getTrendingMovies","response","data","results","console","log","message","getMoviesById","movieId","getMovieByQuery","query","getMovieCast","cast","getReviewsOnMovie","StyledForm","styled","SearchFormButton","StyledInput","StyledLink","NavLink","useState","moviesByQuery","setMoviesByQuery","useSearchParams","searchParams","setSearchParams","searchQuery","setSearchQuery","get","location","useLocation","useEffect","then","res","onSubmit","e","preventDefault","type","value","onChange","target","trim","map","id","title","to","state","from"],"sourceRoot":""}